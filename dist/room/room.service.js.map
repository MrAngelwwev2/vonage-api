{"version":3,"sources":["../../src/room/room.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { Room, User } from 'src/interfaces/interface';\n\n@Injectable()\nexport class RoomService {\n    private rooms: Room[] = []\n\n    async addRoom(roomName: string, host: User): Promise<void> {\n        const room = await this.getRoomByName(roomName)\n        if (room === -1) {\n            await this.rooms.push({ name: roomName, host, users: [host] })\n        }\n    }\n\n    async removeRoom(roomName: string): Promise<void> {\n        const findRoom = await this.getRoomByName(roomName)\n        if (findRoom !== -1) {\n            this.rooms = this.rooms.filter((room) => room.name !== roomName)\n        }\n    }\n\n    async getRoomHost(hostName: string): Promise<User> {\n        const roomIndex = await this.getRoomByName(hostName)\n        return this.rooms[roomIndex].host\n    }\n\n    async getRoomByName(roomName: string): Promise<number> {\n        const roomIndex = this.rooms.findIndex((room) => room?.name === roomName)\n        return roomIndex\n    }\n\n    async getRoom(roomName: string): Promise<Room> {\n        const room = this.rooms.find((room) => room?.name === roomName)\n        return room\n    }\n\n    async addUserToRoom(roomName: string, user: User): Promise<void> {\n        const roomIndex = await this.getRoomByName(roomName)\n        if (roomIndex !== -1) {\n            this.rooms[roomIndex].users.push(user)\n            const host = await this.getRoomHost(roomName)\n            if (host.userId === user.userId) {\n                this.rooms[roomIndex].host.socketId = user.socketId\n            }\n            console.log(\"this.rooms[roomIndex]\", this.rooms[roomIndex])\n        } else {\n            await this.addRoom(roomName, user)\n        }\n\n    }\n\n    async findRoomsByUserSocketId(socketId: string): Promise<Room[]> {\n        const filteredRooms = this.rooms.filter((room) => {\n            const found = room.users.find((user) => user.socketId === socketId)\n            if (found) {\n                return found\n            }\n        })\n        return filteredRooms\n    }\n\n    async removeUserFromAllRooms(socketId: string): Promise<void> {\n        const rooms = await this.findRoomsByUserSocketId(socketId)\n        for (const room of rooms) {\n            await this.removeUserFromRoom(socketId, room.name)\n        }\n    }\n\n    async removeUserFromRoom(socketId: string, roomName: string): Promise<void> {\n        const room = await this.getRoomByName(roomName)\n        this.rooms[room].users = this.rooms[room].users.filter((user) => user.socketId !== socketId)\n        if (this.rooms[room].users.length === 0) {\n            await this.removeRoom(roomName)\n        }\n    }\n\n    async getRooms(): Promise<Room[]> {\n        return this.rooms\n    }\n}\n"],"names":["RoomService","addRoom","roomName","host","room","getRoomByName","rooms","push","name","users","removeRoom","findRoom","filter","getRoomHost","hostName","roomIndex","findIndex","getRoom","find","addUserToRoom","user","userId","socketId","console","log","findRoomsByUserSocketId","filteredRooms","found","removeUserFromAllRooms","removeUserFromRoom","length","getRooms","Injectable"],"mappings":"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"}