{"version":3,"sources":["../../src/service-leg/service-leg.gateway.ts"],"sourcesContent":["import { Logger } from '@nestjs/common';\nimport {\n  ConnectedSocket,\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  OnGatewayInit,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\n\nimport { Server, Socket } from 'socket.io';\nimport { ClientToServerEvents, Message, ServerToClientEvents, User } from 'src/interfaces/interface';\nimport { RoomService } from 'src/room/room.service';\n\n//https://medium.com/@sulthanftr/fulfilling-the-solid-principles-in-a-nest-js-api-37f0ae18dc7f\n//https://stackoverflow.com/questions/56699402/websockets-on-specific-route-in-nest-js\n@WebSocketGateway()\nexport class ServiceLegGateway\n  implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(ServiceLegGateway.name);\n  constructor(private roomService: RoomService) { }\n  // @WebSocketServer() io: Server;\n  @WebSocketServer() server: Server = new Server<ServerToClientEvents, ClientToServerEvents>()\n  lstUsers: Socket[] = []\n  lstRooms = []\n  afterInit() {\n    this.logger.log('Initialized');\n  }\n\n  handleConnection(client: Socket, ...args: any[]) {\n    this.lstUsers.push(client)\n    // const { sockets } = this.io.sockets;\n\n    this.logger.log(`Client id: ${client.id} connected`);\n    // this.logger.debug(`Number of connected clients: ${sockets.size}`);\n  }\n\n  handleDisconnect(client: any) {\n\n    this.logger.log(`Cliend id:${client.id} disconnected`);\n  }\n\n  @SubscribeMessage('events')\n  handleEvent(@MessageBody() data: string): string {\n    return data;\n  }\n\n  // @SubscribeMessage(\"message\")\n  // handleMessage(client: any, data: any) {\n  //   this.logger.log(`Message received from client id: ${client.id}`);\n  //   this.logger.debug(`Payload: ${data}`);\n  //   return {\n  //     event: \"pong\",\n  //     data,\n  //   };\n  // }\n  @SubscribeMessage('chat')\n  async handleChatEvent(@ConnectedSocket() client:Socket,\n    @MessageBody()\n    payload: Message\n  ): Promise<Message> {\n    this.logger.log(payload)\n    // this.server.to(payload.roomName).emit('chat', payload) // broadcast messages\n    const room = this.roomService.getRoom(payload.roomName)\n    if(room){\n      for(const user of (await room).users){\n        if(user.userId!=client.id){\n          const sock = this.lstUsers.find(({id})=>id==user.userId)\n          sock.emit('chat',payload)\n        }\n      }\n    }\n    console.log(\"this.server.to(payload.roomName)\")\n    return payload\n  }\n\n  @SubscribeMessage('join_room')\n  async handleSetClientDataEvent(@ConnectedSocket() client:Socket,\n    @MessageBody()\n    payload: {\n      roomName: string\n      user: User\n    }\n  ) {\n    \n    if (payload.user.socketId) {\n      this.logger.log(`${payload.user.socketId} is joining ${payload.roomName}`)\n      await this.server.in(client.id).socketsJoin(payload.roomName)\n      await this.roomService.addUserToRoom(payload.roomName, {...payload.user,userId:client.id})\n    }\n  }\n}\n"],"names":["ServiceLegGateway","afterInit","logger","log","handleConnection","client","args","lstUsers","push","id","handleDisconnect","handleEvent","data","handleChatEvent","payload","room","roomService","getRoom","roomName","user","users","userId","sock","find","emit","console","handleSetClientDataEvent","socketId","server","in","socketsJoin","addUserToRoom","constructor","Logger","name","Server","lstRooms","WebSocketServer","SubscribeMessage","MessageBody","ConnectedSocket","WebSocketGateway"],"mappings":"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"}