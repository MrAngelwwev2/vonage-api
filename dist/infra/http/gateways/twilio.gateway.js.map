{"version":3,"sources":["../../../../src/infra/http/gateways/twilio.gateway.ts"],"sourcesContent":["import { Logger } from '@nestjs/common';\nimport {\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  OnGatewayInit,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\n\nimport { Server } from 'socket.io';\n\n//https://medium.com/@sulthanftr/fulfilling-the-solid-principles-in-a-nest-js-api-37f0ae18dc7f\n//https://stackoverflow.com/questions/56699402/websockets-on-specific-route-in-nest-js\n@WebSocketGateway({\n  path: '/twilio', \n  cors: {\n    origin: '*'\n  }})\nexport class TwilioWebSocketGateway\n  implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(TwilioWebSocketGateway.name);\n\n  @WebSocketServer() io: Server;\n\n  afterInit() {\n    this.logger.log('Initialized');\n  }\n\n  handleConnection(client: any, ...args: any[]) {\n    const { sockets } = this.io.sockets;\n\n    this.logger.log(`Client id: ${client.id} connected`);\n    this.logger.debug(`Number of connected clients: ${sockets.size}`);\n  }\n\n  handleDisconnect(client: any) {\n    this.logger.log(`Cliend id:${client.id} disconnected`);\n  }\n\n  @SubscribeMessage(\"message\")\n  handleMessage(client: any, data: any) {\n    const msg = JSON.parse(data);\n    switch (msg.event) {\n      case \"connected\":\n        console.log(`A new call has connected.`);\n\n        // Create Stream to the Google Speech to Text API\n        /*recognizeStream = client\n          .streamingRecognize(request)\n          .on(\"error\", console.error)\n          .on(\"data\", data => {\n            console.log(data.results[0].alternatives[0].transcript);\n          });\n          */\n        break;\n      case \"start\":\n        console.log(`Starting Media Stream ${msg.streamSid}`);\n        break;\n      case \"media\":\n        // Write Media Packets to the recognize stream\n        //recognizeStream.write(msg.media.payload);\n        break;\n      case \"stop\":\n        console.log(`Call Has Ended`);\n        //recognizeStream.destroy();\n        break;\n    }\n  }\n}\n"],"names":["TwilioWebSocketGateway","afterInit","logger","log","handleConnection","client","args","sockets","io","id","debug","size","handleDisconnect","handleMessage","data","msg","JSON","parse","event","console","streamSid","Logger","name","WebSocketServer","SubscribeMessage","WebSocketGateway","path","cors","origin"],"mappings":";;;;+BAoBaA;;;eAAAA;;;wBApBU;4BAShB;0BAEgB;;;;;;;;;;AAShB,IAAA,AAAMA,yBAAN,MAAMA;IAMXC,YAAY;QACV,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC;IAClB;IAEAC,iBAAiBC,MAAW,EAAE,GAAGC,IAAW,EAAE;QAC5C,MAAM,EAAEC,OAAO,EAAE,GAAG,IAAI,CAACC,EAAE,CAACD,OAAO;QAEnC,IAAI,CAACL,MAAM,CAACC,GAAG,CAAC,CAAC,WAAW,EAAEE,OAAOI,EAAE,CAAC,UAAU,CAAC;QACnD,IAAI,CAACP,MAAM,CAACQ,KAAK,CAAC,CAAC,6BAA6B,EAAEH,QAAQI,IAAI,CAAC,CAAC;IAClE;IAEAC,iBAAiBP,MAAW,EAAE;QAC5B,IAAI,CAACH,MAAM,CAACC,GAAG,CAAC,CAAC,UAAU,EAAEE,OAAOI,EAAE,CAAC,aAAa,CAAC;IACvD;IAGAI,cAAcR,MAAW,EAAES,IAAS,EAAE;QACpC,MAAMC,MAAMC,KAAKC,KAAK,CAACH;QACvB,OAAQC,IAAIG,KAAK;YACf,KAAK;gBACHC,QAAQhB,GAAG,CAAC,CAAC,yBAAyB,CAAC;gBAUvC;YACF,KAAK;gBACHgB,QAAQhB,GAAG,CAAC,CAAC,sBAAsB,EAAEY,IAAIK,SAAS,CAAC,CAAC;gBACpD;YACF,KAAK;gBAGH;YACF,KAAK;gBACHD,QAAQhB,GAAG,CAAC,CAAC,cAAc,CAAC;gBAE5B;QACJ;IACF;;aA/CiBD,SAAS,IAAImB,cAAM,CAACrB,uBAAuBsB,IAAI;;AAgDlE;;IA9CGC,IAAAA,2BAAe;uCAAO,gBAAM,4BAAN,gBAAM;GAJlBvB;;IAqBVwB,IAAAA,4BAAgB,EAAC;;;;;;;GArBPxB;AAAAA;IALZyB,IAAAA,4BAAgB,EAAC;QAChBC,MAAM;QACNC,MAAM;YACJC,QAAQ;QACV;IAAC;GACU5B"}